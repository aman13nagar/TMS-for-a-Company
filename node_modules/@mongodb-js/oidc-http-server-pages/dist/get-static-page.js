"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStaticPage = void 0;
const get_templates_js_1 = __importDefault(require("./get-templates.js"));
function findTemplate(templates, parameterKeys) {
    const parametersJoined = parameterKeys.sort().join('-');
    for (const template of templates) {
        const templateParametersJoined = Object.keys(template.parameters)
            .sort()
            .join('-');
        if (parametersJoined === templateParametersJoined)
            return template;
    }
}
function replacePlaceholders(template, parameters) {
    let { html } = template;
    for (const [key, placeholder] of Object.entries(template.parameters)) {
        html = html.replaceAll(placeholder, escapeHTML(parameters[key]));
    }
    return html;
}
function escapeHTML(str) {
    return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}
function getStaticPage(page, parameters, templates) {
    if (!templates) {
        templates = (0, get_templates_js_1.default)();
    }
    const pageTemplates = templates && templates[page];
    if (!pageTemplates) {
        throw new Error(`No template found for ${page}`);
    }
    const nonEmptyParameters = Object.keys(parameters).filter((key) => typeof parameters[key] !== 'undefined' && parameters !== null);
    const template = findTemplate(pageTemplates, nonEmptyParameters);
    if (!template) {
        throw new Error(`No template found for ${page}; parameters: ${Object.keys(parameters).join(',')}. The parameters might be incorrect.`);
    }
    const html = replacePlaceholders(template, parameters);
    return html;
}
exports.getStaticPage = getStaticPage;
//# sourceMappingURL=get-static-page.js.map