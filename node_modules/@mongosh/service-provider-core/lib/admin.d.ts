import type ShellAuthOptions from './shell-auth-options';
import type { MongoClientOptions, ReadConcern, ReadPreference, WriteConcern, Document, CreateCollectionOptions, ClientSession, DbOptions, ClientSessionOptions, ListDatabasesOptions, AutoEncryptionOptions, Collection } from './all-transport-types';
import type { bson as BSON, ConnectionExtraInfo } from './index';
import type { ReplPlatform } from './platform';
import type { AWSEncryptionKeyOptions, AzureEncryptionKeyOptions, ClientEncryption as MongoCryptClientEncryption, ClientEncryptionDataKeyProvider, GCPEncryptionKeyOptions, ClientEncryption, ClientEncryptionOptions } from './all-fle-types';
export interface CreateEncryptedCollectionOptions {
    provider: ClientEncryptionDataKeyProvider;
    createCollectionOptions: Omit<CreateCollectionOptions, 'encryptedFields'> & {
        encryptedFields: Document;
    };
    masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;
}
export interface CheckMetadataConsistencyOptions {
    cursor?: {
        batchSize: number;
    };
    checkIndexes?: 1;
}
export interface ConnectionInfo {
    buildInfo: Document | null;
    topology: any | null;
    extraInfo: (ConnectionExtraInfo & {
        fcv?: string;
    }) | null;
}
export default interface Admin {
    platform: ReplPlatform;
    initialDb: string;
    bsonLibrary: typeof BSON;
    listDatabases(database: string, options?: ListDatabasesOptions): Promise<Document>;
    getNewConnection(uri: string, options: MongoClientOptions): Promise<any>;
    getURI(): string | undefined;
    getConnectionInfo(): Promise<ConnectionInfo>;
    authenticate(authDoc: ShellAuthOptions): Promise<{
        ok: number;
    }>;
    createCollection(dbName: string, collName: string, options: CreateCollectionOptions, dbOptions?: DbOptions): Promise<{
        ok: number;
    }>;
    getReadPreference(): ReadPreference;
    getReadConcern(): ReadConcern | undefined;
    getWriteConcern(): WriteConcern | undefined;
    resetConnectionOptions(options: MongoClientOptions): Promise<void>;
    startSession(options: ClientSessionOptions): ClientSession;
    getRawClient(): any;
    createClientEncryption?(options: ClientEncryptionOptions): ClientEncryption;
    getFleOptions?: () => AutoEncryptionOptions | undefined;
    createEncryptedCollection?(dbName: string, collName: string, options: CreateEncryptedCollectionOptions, libmongocrypt: MongoCryptClientEncryption): Promise<{
        collection: Collection;
        encryptedFields: Document;
    }>;
}
