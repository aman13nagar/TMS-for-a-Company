"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("./enums");
const decorators_1 = require("./decorators");
let StreamProcessor = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiWithMongoClass;
    let _instanceExtraInitializers = [];
    let _start_decorators;
    let _stop_decorators;
    let _drop_decorators;
    let _stats_decorators;
    let _sample_decorators;
    var StreamProcessor = _classThis = class extends _classSuper {
        constructor(_streams, name) {
            super();
            this._streams = (__runInitializers(this, _instanceExtraInitializers), _streams);
            this.name = name;
        }
        get _mongo() {
            return this._streams._mongo;
        }
        [enums_1.asPrintable]() {
            return `Atlas Stream Processor: ${this.name}`;
        }
        async start() {
            return await this._streams._runStreamCommand({
                startStreamProcessor: this.name,
            });
        }
        async stop() {
            return await this._streams._runStreamCommand({
                stopStreamProcessor: this.name,
            });
        }
        async drop() {
            return this._drop();
        }
        async _drop() {
            return await this._streams._runStreamCommand({
                dropStreamProcessor: this.name,
            });
        }
        async stats(options = {}) {
            return this._streams._runStreamCommand({
                getStreamProcessorStats: this.name,
                ...options,
            });
        }
        async sample(options = {}) {
            const r = await this._streams._runStreamCommand({
                startSampleStreamProcessor: this.name,
                ...options,
            });
            if (r.ok !== 1) {
                return r;
            }
            return this._sampleFrom(r.cursorId);
        }
        async _sampleFrom(cursorId) {
            let currentCursorId = cursorId;
            while (String(currentCursorId) !== '0') {
                const res = await this._streams._runStreamCommand({
                    getMoreSampleStreamProcessor: this.name,
                    cursorId: currentCursorId,
                });
                if (res.ok !== 1) {
                    return res;
                }
                currentCursorId = res.cursorId;
                for (const doc of res.messages) {
                    await this._instanceState.shellApi.printjson(doc);
                }
                if (!res.messages.length) {
                    const interruptable = this._instanceState.interrupted.asPromise();
                    try {
                        await Promise.race([
                            this._instanceState.shellApi.sleep(1000),
                            interruptable.promise,
                        ]);
                    }
                    finally {
                        interruptable.destroy();
                    }
                }
            }
            return;
        }
    };
    __setFunctionName(_classThis, "StreamProcessor");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _start_decorators = [decorators_1.returnsPromise];
        _stop_decorators = [decorators_1.returnsPromise];
        _drop_decorators = [decorators_1.returnsPromise];
        _stats_decorators = [decorators_1.returnsPromise];
        _sample_decorators = [decorators_1.returnsPromise];
        __esDecorate(_classThis, null, _start_decorators, { kind: "method", name: "start", static: false, private: false, access: { has: obj => "start" in obj, get: obj => obj.start }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _stop_decorators, { kind: "method", name: "stop", static: false, private: false, access: { has: obj => "stop" in obj, get: obj => obj.stop }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _drop_decorators, { kind: "method", name: "drop", static: false, private: false, access: { has: obj => "drop" in obj, get: obj => obj.drop }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _stats_decorators, { kind: "method", name: "stats", static: false, private: false, access: { has: obj => "stats" in obj, get: obj => obj.stats }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _sample_decorators, { kind: "method", name: "sample", static: false, private: false, access: { has: obj => "sample" in obj, get: obj => obj.sample }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        StreamProcessor = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return StreamProcessor = _classThis;
})();
exports.default = StreamProcessor;
//# sourceMappingURL=stream-processor.js.map