"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const errors_1 = require("@mongosh/errors");
let PlanCache = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiWithMongoClass;
    let _instanceExtraInitializers = [];
    let _clear_decorators;
    let _clearPlansByQuery_decorators;
    let _list_decorators;
    let _listQueryShapes_decorators;
    let _getPlansByQuery_decorators;
    var PlanCache = _classThis = class extends _classSuper {
        constructor(collection) {
            super();
            this._collection = (__runInitializers(this, _instanceExtraInitializers), void 0);
            this._collection = collection;
        }
        get _mongo() {
            return this._collection._mongo;
        }
        [enums_1.asPrintable]() {
            return `PlanCache for collection ${this._collection._name}.`;
        }
        async clear() {
            return await this._collection.runCommand('planCacheClear');
        }
        async clearPlansByQuery(query, projection, sort) {
            const cmd = { query };
            if (projection) {
                cmd.projection = projection;
            }
            if (sort) {
                cmd.sort = sort;
            }
            return await this._collection.runCommand('planCacheClear', cmd);
        }
        async list(pipeline) {
            const p = pipeline || [];
            const agg = await this._collection.aggregate([
                { $planCacheStats: {} },
                ...p,
            ]);
            return await agg.toArray();
        }
        listQueryShapes() {
            throw new errors_1.MongoshDeprecatedError('PlanCache.listQueryShapes was deprecated, please use PlanCache.list instead');
        }
        getPlansByQuery() {
            throw new errors_1.MongoshDeprecatedError('PlanCache.getPlansByQuery was deprecated, please use PlanCache.list instead');
        }
    };
    __setFunctionName(_classThis, "PlanCache");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _clear_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])];
        _clearPlansByQuery_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])];
        _list_decorators = [(0, decorators_1.serverVersions)(['4.4.0', enums_1.ServerVersions.latest]), decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])];
        _listQueryShapes_decorators = [decorators_1.deprecated];
        _getPlansByQuery_decorators = [decorators_1.deprecated];
        __esDecorate(_classThis, null, _clear_decorators, { kind: "method", name: "clear", static: false, private: false, access: { has: obj => "clear" in obj, get: obj => obj.clear }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _clearPlansByQuery_decorators, { kind: "method", name: "clearPlansByQuery", static: false, private: false, access: { has: obj => "clearPlansByQuery" in obj, get: obj => obj.clearPlansByQuery }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _list_decorators, { kind: "method", name: "list", static: false, private: false, access: { has: obj => "list" in obj, get: obj => obj.list }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _listQueryShapes_decorators, { kind: "method", name: "listQueryShapes", static: false, private: false, access: { has: obj => "listQueryShapes" in obj, get: obj => obj.listQueryShapes }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _getPlansByQuery_decorators, { kind: "method", name: "getPlansByQuery", static: false, private: false, access: { has: obj => "getPlansByQuery" in obj, get: obj => obj.getPlansByQuery }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        PlanCache = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return PlanCache = _classThis;
})();
exports.default = PlanCache;
//# sourceMappingURL=plan-cache.js.map