"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@mongosh/errors");
const history_1 = require("@mongosh/history");
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const helpers_1 = require("./helpers");
let ReplicaSet = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiWithMongoClass;
    let _instanceExtraInitializers = [];
    let _initiate_decorators;
    let _config_decorators;
    let _conf_decorators;
    let _reconfig_decorators;
    let _reconfigForPSASet_decorators;
    let _status_decorators;
    let _isMaster_decorators;
    let _hello_decorators;
    let _printSecondaryReplicationInfo_decorators;
    let _printSlaveReplicationInfo_decorators;
    let _printReplicationInfo_decorators;
    let _add_decorators;
    let _addArb_decorators;
    let _remove_decorators;
    let _freeze_decorators;
    let _stepDown_decorators;
    let _syncFrom_decorators;
    let _secondaryOk_decorators;
    var ReplicaSet = _classThis = class extends _classSuper {
        constructor(database) {
            super();
            this._database = (__runInitializers(this, _instanceExtraInitializers), void 0);
            this._database = database;
        }
        get _mongo() {
            return this._database._mongo;
        }
        async initiate(config = {}) {
            this._emitReplicaSetApiCall('initiate', { config });
            return this._database._runAdminCommand({ replSetInitiate: config });
        }
        async _getConfig() {
            try {
                const result = await this._database._runAdminCommand({
                    replSetGetConfig: 1,
                });
                if (result.config === undefined) {
                    throw new errors_1.MongoshRuntimeError("Documented returned from command replSetGetConfig does not contain 'config'", errors_1.CommonErrors.CommandFailed);
                }
                return result.config;
            }
            catch (error) {
                if ((error === null || error === void 0 ? void 0 : error.codeName) === 'CommandNotFound' ||
                    (error === null || error === void 0 ? void 0 : error.codeName) === 'APIStrictError') {
                    const doc = (await this._database
                        .getSiblingDB('local')
                        .getCollection('system.replset')
                        .findOne());
                    if (doc === null) {
                        throw new errors_1.MongoshRuntimeError('No documents in local.system.replset', errors_1.CommonErrors.CommandFailed);
                    }
                    return doc;
                }
                throw error;
            }
        }
        async config() {
            this._emitReplicaSetApiCall('config', {});
            return this._getConfig();
        }
        async conf() {
            this._emitReplicaSetApiCall('conf', {});
            return this._getConfig();
        }
        async reconfig(config, options = {}) {
            var _a;
            (0, helpers_1.assertArgsDefinedType)([config, options], ['object', [undefined, 'object']], 'ReplicaSet.reconfig');
            this._emitReplicaSetApiCall('reconfig', { config, options });
            const conf = await this._getConfig();
            config.version = conf.version ? conf.version + 1 : 1;
            (_a = config.protocolVersion) !== null && _a !== void 0 ? _a : (config.protocolVersion = conf.protocolVersion);
            const cmd = { replSetReconfig: config, ...options };
            return await this._database._runAdminCommand(cmd);
        }
        async reconfigForPSASet(newMemberIndex, config, options = {}) {
            var _a;
            (0, helpers_1.assertArgsDefinedType)([newMemberIndex, config, options], ['number', 'object', [undefined, 'object']], 'ReplicaSet.reconfigForPSASet');
            this._emitReplicaSetApiCall('reconfigForPSASet', {
                newMemberIndex,
                config,
                options,
            });
            const print = (msg) => this._instanceState.shellApi.print(msg);
            const newMemberConfig = (_a = config.members) === null || _a === void 0 ? void 0 : _a[newMemberIndex];
            if (!newMemberConfig) {
                throw new errors_1.MongoshInvalidInputError(`Node at index ${newMemberIndex} does not exist in the new config`, errors_1.CommonErrors.InvalidArgument);
            }
            if (newMemberConfig.votes !== 1) {
                throw new errors_1.MongoshInvalidInputError(`Node at index ${newMemberIndex} must have { votes: 1 } in the new config (actual: { votes: ${newMemberConfig.votes} })`, errors_1.CommonErrors.InvalidArgument);
            }
            const oldConfig = await this._getConfig();
            const oldMemberConfig = oldConfig.members.find((member) => member._id === newMemberConfig._id);
            if (!oldMemberConfig) {
                if (oldConfig.members.find((member) => member.host === newMemberConfig.host)) {
                    await print(`Warning: Node at index ${newMemberIndex} has { host: "${newMemberConfig.host}" }, ` +
                        'which is also present in the old config, but with a different _id field.');
                }
            }
            else if (oldMemberConfig.votes) {
                throw new errors_1.MongoshInvalidInputError(`Node at index ${newMemberIndex} must have { votes: 0 } in the old config (actual: { votes: ${oldMemberConfig.votes} })`, errors_1.CommonErrors.InvalidArgument);
            }
            const newMemberPriority = newMemberConfig.priority;
            await print(`Running first reconfig to give member at index ${newMemberIndex} { votes: 1, priority: 0 }`);
            newMemberConfig.votes = 1;
            newMemberConfig.priority = 0;
            const firstResult = await this.reconfig(config, options);
            if (newMemberPriority === 0) {
                await print('No second reconfig necessary because .priority = 0');
                return firstResult;
            }
            await print(`Running second reconfig to give member at index ${newMemberIndex} { priority: ${newMemberPriority} }`);
            newMemberConfig.priority = newMemberPriority;
            try {
                return await this.reconfig(config, options);
            }
            catch (e) {
                await print('Second reconfig did not succeed, giving up');
                await print(`Attempted command: rs.reconfig(${JSON.stringify(config, null, '  ')}, ${JSON.stringify(options)})`);
                throw e;
            }
        }
        async status() {
            this._emitReplicaSetApiCall('status', {});
            return this._database._runAdminCommand({
                replSetGetStatus: 1,
            });
        }
        async isMaster() {
            this._emitReplicaSetApiCall('isMaster', {});
            return this._database.getSiblingDB('admin').isMaster();
        }
        async hello() {
            this._emitReplicaSetApiCall('hello', {});
            return this._database.getSiblingDB('admin').hello();
        }
        async printSecondaryReplicationInfo() {
            this._emitReplicaSetApiCall('printSecondaryReplicationInfo', {});
            return this._database.printSecondaryReplicationInfo();
        }
        printSlaveReplicationInfo() {
            throw new errors_1.MongoshDeprecatedError('printSlaveReplicationInfo has been deprecated. Use printSecondaryReplicationInfo instead');
        }
        async printReplicationInfo() {
            this._emitReplicaSetApiCall('printReplicationInfo', {});
            return this._database.printReplicationInfo();
        }
        async add(hostport, arb) {
            (0, helpers_1.assertArgsDefinedType)([hostport, arb], [
                ['string', 'object'],
                [undefined, 'boolean'],
            ], 'ReplicaSet.add');
            this._emitReplicaSetApiCall('add', { hostport, arb });
            const configDoc = await this._getConfig();
            configDoc.version++;
            const max = Math.max(...configDoc.members.map((m) => m._id));
            let cfg;
            if (typeof hostport === 'string') {
                cfg = { _id: max + 1, host: hostport };
                if (arb) {
                    cfg.arbiterOnly = true;
                }
            }
            else if (arb === true) {
                throw new errors_1.MongoshInvalidInputError(`Expected first parameter to be a host-and-port string of arbiter, but got ${JSON.stringify(hostport)}`, errors_1.CommonErrors.InvalidArgument);
            }
            else {
                cfg = hostport;
                if (cfg._id === null || cfg._id === undefined) {
                    cfg._id = max + 1;
                }
            }
            configDoc.members.push(cfg);
            return this._database._runAdminCommand({
                replSetReconfig: configDoc,
            });
        }
        async addArb(hostname) {
            this._emitReplicaSetApiCall('addArb', { hostname });
            return this.add(hostname, true);
        }
        async remove(hostname) {
            (0, helpers_1.assertArgsDefinedType)([hostname], ['string'], 'ReplicaSet.remove');
            this._emitReplicaSetApiCall('remove', { hostname });
            const configDoc = await this._getConfig();
            configDoc.version++;
            for (let i = 0; i < configDoc.members.length; i++) {
                if (configDoc.members[i].host === hostname) {
                    configDoc.members.splice(i, 1);
                    return this._database._runAdminCommand({
                        replSetReconfig: configDoc,
                    });
                }
            }
            throw new errors_1.MongoshInvalidInputError(`Couldn't find ${hostname} in ${JSON.stringify(configDoc.members)}. Is ${hostname} a member of this replset?`, errors_1.CommonErrors.InvalidArgument);
        }
        async freeze(secs) {
            (0, helpers_1.assertArgsDefinedType)([secs], ['number'], 'ReplicaSet.freeze');
            this._emitReplicaSetApiCall('freeze', { secs });
            return this._database._runAdminCommand({
                replSetFreeze: secs,
            });
        }
        async stepDown(stepdownSecs, catchUpSecs) {
            (0, helpers_1.assertArgsDefinedType)([stepdownSecs, catchUpSecs], [
                [undefined, 'number'],
                [undefined, 'number'],
            ], 'ReplicaSet.stepDown');
            this._emitReplicaSetApiCall('stepDown', { stepdownSecs, catchUpSecs });
            const cmd = {
                replSetStepDown: stepdownSecs === undefined ? 60 : stepdownSecs,
            };
            if (catchUpSecs !== undefined) {
                cmd.secondaryCatchUpPeriodSecs = catchUpSecs;
            }
            return this._database._runAdminCommand(cmd);
        }
        async syncFrom(host) {
            (0, helpers_1.assertArgsDefinedType)([host], ['string'], 'ReplicaSet.syncFrom');
            this._emitReplicaSetApiCall('syncFrom', { host });
            return this._database._runAdminCommand({
                replSetSyncFrom: host,
            });
        }
        async secondaryOk() {
            await this._mongo.setSecondaryOk();
        }
        [(_initiate_decorators = [decorators_1.returnsPromise], _config_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([1])], _conf_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([1])], _reconfig_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _reconfigForPSASet_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _status_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _isMaster_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _hello_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([1])], _printSecondaryReplicationInfo_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _printSlaveReplicationInfo_decorators = [decorators_1.deprecated, (0, decorators_1.apiVersions)([])], _printReplicationInfo_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _add_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _addArb_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _remove_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _freeze_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _stepDown_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _syncFrom_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([])], _secondaryOk_decorators = [decorators_1.deprecated, decorators_1.returnsPromise], enums_1.asPrintable)]() {
            return `ReplicaSet class connected to ${(0, history_1.redactURICredentials)(this._database._mongo._uri)} via db ${this._database._name}`;
        }
        _emitReplicaSetApiCall(methodName, methodArguments = {}) {
            this._database._mongo._instanceState.emitApiCallWithArgs({
                method: methodName,
                class: 'ReplicaSet',
                arguments: methodArguments,
            });
        }
    };
    __setFunctionName(_classThis, "ReplicaSet");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        __esDecorate(_classThis, null, _initiate_decorators, { kind: "method", name: "initiate", static: false, private: false, access: { has: obj => "initiate" in obj, get: obj => obj.initiate }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _config_decorators, { kind: "method", name: "config", static: false, private: false, access: { has: obj => "config" in obj, get: obj => obj.config }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _conf_decorators, { kind: "method", name: "conf", static: false, private: false, access: { has: obj => "conf" in obj, get: obj => obj.conf }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _reconfig_decorators, { kind: "method", name: "reconfig", static: false, private: false, access: { has: obj => "reconfig" in obj, get: obj => obj.reconfig }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _reconfigForPSASet_decorators, { kind: "method", name: "reconfigForPSASet", static: false, private: false, access: { has: obj => "reconfigForPSASet" in obj, get: obj => obj.reconfigForPSASet }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _status_decorators, { kind: "method", name: "status", static: false, private: false, access: { has: obj => "status" in obj, get: obj => obj.status }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _isMaster_decorators, { kind: "method", name: "isMaster", static: false, private: false, access: { has: obj => "isMaster" in obj, get: obj => obj.isMaster }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _hello_decorators, { kind: "method", name: "hello", static: false, private: false, access: { has: obj => "hello" in obj, get: obj => obj.hello }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _printSecondaryReplicationInfo_decorators, { kind: "method", name: "printSecondaryReplicationInfo", static: false, private: false, access: { has: obj => "printSecondaryReplicationInfo" in obj, get: obj => obj.printSecondaryReplicationInfo }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _printSlaveReplicationInfo_decorators, { kind: "method", name: "printSlaveReplicationInfo", static: false, private: false, access: { has: obj => "printSlaveReplicationInfo" in obj, get: obj => obj.printSlaveReplicationInfo }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _printReplicationInfo_decorators, { kind: "method", name: "printReplicationInfo", static: false, private: false, access: { has: obj => "printReplicationInfo" in obj, get: obj => obj.printReplicationInfo }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _add_decorators, { kind: "method", name: "add", static: false, private: false, access: { has: obj => "add" in obj, get: obj => obj.add }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _addArb_decorators, { kind: "method", name: "addArb", static: false, private: false, access: { has: obj => "addArb" in obj, get: obj => obj.addArb }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _remove_decorators, { kind: "method", name: "remove", static: false, private: false, access: { has: obj => "remove" in obj, get: obj => obj.remove }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _freeze_decorators, { kind: "method", name: "freeze", static: false, private: false, access: { has: obj => "freeze" in obj, get: obj => obj.freeze }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _stepDown_decorators, { kind: "method", name: "stepDown", static: false, private: false, access: { has: obj => "stepDown" in obj, get: obj => obj.stepDown }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _syncFrom_decorators, { kind: "method", name: "syncFrom", static: false, private: false, access: { has: obj => "syncFrom" in obj, get: obj => obj.syncFrom }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _secondaryOk_decorators, { kind: "method", name: "secondaryOk", static: false, private: false, access: { has: obj => "secondaryOk" in obj, get: obj => obj.secondaryOk }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        ReplicaSet = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return ReplicaSet = _classThis;
})();
exports.default = ReplicaSet;
//# sourceMappingURL=replica-set.js.map