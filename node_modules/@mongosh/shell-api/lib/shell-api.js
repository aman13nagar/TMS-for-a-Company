"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const mongo_1 = __importDefault(require("./mongo"));
const result_1 = require("./result");
const helpers_1 = require("./helpers");
const service_provider_core_1 = require("@mongosh/service-provider-core");
const errors_1 = require("@mongosh/errors");
const dbquery_1 = require("./dbquery");
const util_1 = require("util");
const path_1 = require("path");
const types_1 = require("@mongosh/types");
const i18n_1 = __importDefault(require("@mongosh/i18n"));
const instanceStateSymbol = Symbol.for('@@mongosh.instanceState');
const loadCallNestingLevelSymbol = Symbol.for('@@mongosh.loadCallNestingLevel');
let ShellConfig = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiClass;
    let _instanceExtraInitializers = [];
    let _set_decorators;
    let _get_decorators;
    let _reset_decorators;
    var ShellConfig = _classThis = class extends _classSuper {
        constructor(instanceState) {
            super();
            this._instanceState = (__runInitializers(this, _instanceExtraInitializers), void 0);
            this._instanceState = instanceState;
            this.defaults = Object.freeze(new types_1.ShellUserConfig());
        }
        async set(key, value) {
            var _a, _b;
            (0, helpers_1.assertArgsDefinedType)([key], ['string'], 'config.set');
            const { evaluationListener } = this._instanceState;
            const isValidKey = (await this._allKeys()).includes(key);
            if (isValidKey) {
                const validationResult = await ((_a = evaluationListener.validateConfig) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, key, value));
                if (validationResult) {
                    return `Cannot set option "${key}": ${validationResult}`;
                }
            }
            const result = isValidKey && (await ((_b = evaluationListener.setConfig) === null || _b === void 0 ? void 0 : _b.call(evaluationListener, key, value)));
            if (result !== 'success') {
                return `Option "${key}" is not available in this environment`;
            }
            return `Setting "${key}" has been changed`;
        }
        async get(key) {
            var _a, _b;
            (0, helpers_1.assertArgsDefinedType)([key], ['string'], 'config.get');
            const { evaluationListener } = this._instanceState;
            return (_b = (await ((_a = evaluationListener.getConfig) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, key)))) !== null && _b !== void 0 ? _b : this.defaults[key];
        }
        async reset(key) {
            var _a;
            (0, helpers_1.assertArgsDefinedType)([key], ['string'], 'config.reset');
            const { evaluationListener } = this._instanceState;
            const result = await ((_a = evaluationListener.resetConfig) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, key));
            if (result !== 'success') {
                return `Option "${key}" cannot be changed in this environment`;
            }
            return `Setting "${key}" has been reset to its default value`;
        }
        async _allKeys() {
            var _a, _b;
            const { evaluationListener } = this._instanceState;
            return ((_b = (await ((_a = evaluationListener.listConfigOptions) === null || _a === void 0 ? void 0 : _a.call(evaluationListener)))) !== null && _b !== void 0 ? _b : Object.keys(this.defaults));
        }
        async [(_set_decorators = [decorators_1.returnsPromise], _get_decorators = [decorators_1.returnsPromise], _reset_decorators = [decorators_1.returnsPromise], enums_1.asPrintable)]() {
            return new Map(await Promise.all((await this._allKeys()).map(async (key) => [key, await this.get(key)])));
        }
    };
    __setFunctionName(_classThis, "ShellConfig");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        __esDecorate(_classThis, null, _set_decorators, { kind: "method", name: "set", static: false, private: false, access: { has: obj => "set" in obj, get: obj => obj.set }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _get_decorators, { kind: "method", name: "get", static: false, private: false, access: { has: obj => "get" in obj, get: obj => obj.get }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _reset_decorators, { kind: "method", name: "reset", static: false, private: false, access: { has: obj => "reset" in obj, get: obj => obj.reset }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        ShellConfig = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return ShellConfig = _classThis;
})();
async function useCompleter(params, args) {
    var _a;
    if (args.length > 2)
        return undefined;
    return await params.getDatabaseCompletions((_a = args[1]) !== null && _a !== void 0 ? _a : '');
}
async function showCompleter(params, args) {
    if (args.length > 2)
        return undefined;
    if (args[1] === 'd') {
        return ['databases'];
    }
    const candidates = [
        'databases',
        'dbs',
        'collections',
        'tables',
        'profile',
        'users',
        'roles',
        'log',
        'logs',
        'startupWarnings',
        'automationNotices',
        'nonGenuineMongoDBCheck',
    ];
    return candidates.filter((str) => { var _a; return str.startsWith((_a = args[1]) !== null && _a !== void 0 ? _a : ''); });
}
let ShellApi = (() => {
    var _a;
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiClass;
    let _instanceExtraInitializers = [];
    let _use_decorators;
    let _show_decorators;
    let __untrackedShow_decorators;
    let _exit_decorators;
    let _quit_decorators;
    let _Mongo_decorators;
    let _connect_decorators;
    let _it_decorators;
    let _load_decorators;
    let _enableTelemetry_decorators;
    let _disableTelemetry_decorators;
    let _passwordPrompt_decorators;
    let _sleep_decorators;
    let _print_decorators;
    let _printjson_decorators;
    let _convertShardKeyToHashed_decorators;
    let _cls_decorators;
    var ShellApi = _classThis = class extends _classSuper {
        constructor(instanceState) {
            super();
            this[_a] = (__runInitializers(this, _instanceExtraInitializers), void 0);
            this[instanceStateSymbol] = instanceState;
            this[loadCallNestingLevelSymbol] = 0;
            this.DBQuery = new dbquery_1.DBQuery(instanceState);
            this.config = new ShellConfig(instanceState);
        }
        get _instanceState() {
            return this[instanceStateSymbol];
        }
        get loadCallNestingLevel() {
            return this[loadCallNestingLevelSymbol];
        }
        set loadCallNestingLevel(value) {
            this[loadCallNestingLevelSymbol] = value;
        }
        use(db) {
            return this._instanceState.currentDb._mongo.use(db);
        }
        async show(cmd, arg) {
            return await this._instanceState.currentDb._mongo.show(cmd, arg);
        }
        async _untrackedShow(cmd, arg) {
            return await this._instanceState.currentDb._mongo.show(cmd, arg, false);
        }
        async exit(exitCode) {
            var _b, _c;
            (0, helpers_1.assertArgsDefinedType)([exitCode], [[undefined, 'number']], 'exit');
            (0, helpers_1.assertCLI)(this._instanceState.initialServiceProvider.platform, 'the exit/quit commands');
            await this._instanceState.close(true);
            await ((_c = (_b = this._instanceState.evaluationListener).onExit) === null || _c === void 0 ? void 0 : _c.call(_b, exitCode));
            throw new errors_1.MongoshInternalError('.onExit listener returned');
        }
        async quit(exitCode) {
            return await this.exit(exitCode);
        }
        async Mongo(uri, fleOptions, otherOptions) {
            (0, helpers_1.assertCLI)(this._instanceState.initialServiceProvider.platform, 'new Mongo connections');
            const mongo = new mongo_1.default(this._instanceState, uri, fleOptions, otherOptions);
            await mongo.connect();
            this._instanceState.mongos.push(mongo);
            return mongo;
        }
        async connect(uri, user, pwd) {
            (0, helpers_1.assertArgsDefinedType)([uri, user, pwd], ['string', [undefined, 'string'], [undefined, 'string']], 'connect');
            (0, helpers_1.assertCLI)(this._instanceState.initialServiceProvider.platform, 'new Mongo connections');
            const mongo = new mongo_1.default(this._instanceState, uri);
            await mongo.connect(user, pwd);
            this._instanceState.mongos.push(mongo);
            const db = mongo._serviceProvider.initialDb || service_provider_core_1.DEFAULT_DB;
            return mongo.getDB(db);
        }
        async it() {
            if (!this._instanceState.currentCursor) {
                return new result_1.CursorIterationResult();
            }
            return await this._instanceState.currentCursor._it();
        }
        version() {
            const version = require('../package.json').version;
            return version;
        }
        async load(filename) {
            (0, helpers_1.assertArgsDefinedType)([filename], ['string'], 'load');
            if (!this._instanceState.evaluationListener.onLoad) {
                throw new errors_1.MongoshUnimplementedError('load is not currently implemented for this platform', errors_1.CommonErrors.NotImplemented);
            }
            this._instanceState.messageBus.emit('mongosh:api-load-file', {
                nested: this.loadCallNestingLevel > 0,
                filename,
            });
            const { resolvedFilename, evaluate } = await this._instanceState.evaluationListener.onLoad(filename);
            const context = this._instanceState.context;
            const previousFilename = context.__filename;
            context.__filename = resolvedFilename;
            context.__dirname = (0, path_1.dirname)(resolvedFilename);
            this.loadCallNestingLevel++;
            try {
                await evaluate();
            }
            finally {
                this.loadCallNestingLevel--;
                if (previousFilename) {
                    context.__filename = previousFilename;
                    context.__dirname = (0, path_1.dirname)(previousFilename);
                }
                else {
                    delete context.__filename;
                    delete context.__dirname;
                }
            }
            return true;
        }
        async enableTelemetry() {
            var _b, _c;
            const result = await ((_c = (_b = this._instanceState.evaluationListener).setConfig) === null || _c === void 0 ? void 0 : _c.call(_b, 'enableTelemetry', true));
            if (result === 'success') {
                return i18n_1.default.__('cli-repl.cli-repl.enabledTelemetry');
            }
        }
        async disableTelemetry() {
            var _b, _c;
            const result = await ((_c = (_b = this._instanceState.evaluationListener).setConfig) === null || _c === void 0 ? void 0 : _c.call(_b, 'enableTelemetry', false));
            if (result === 'success') {
                return i18n_1.default.__('cli-repl.cli-repl.disabledTelemetry');
            }
        }
        async passwordPrompt() {
            const { evaluationListener } = this._instanceState;
            if (!evaluationListener.onPrompt) {
                throw new errors_1.MongoshUnimplementedError('passwordPrompt() is not available in this shell', errors_1.CommonErrors.NotImplemented);
            }
            return await evaluationListener.onPrompt('Enter password', 'password');
        }
        async sleep(ms) {
            return await (0, util_1.promisify)(setTimeout)(ms);
        }
        async _print(origArgs, type) {
            var _b;
            const { evaluationListener } = this._instanceState;
            const args = await Promise.all(origArgs.map((arg) => (0, decorators_1.toShellResult)(arg)));
            await ((_b = evaluationListener.onPrint) === null || _b === void 0 ? void 0 : _b.call(evaluationListener, args, type));
        }
        async print(...origArgs) {
            await this._print(origArgs, 'print');
        }
        async printjson(...origArgs) {
            await this._print(origArgs, 'printjson');
        }
        async convertShardKeyToHashed(value) {
            return this._instanceState.currentDb._mongo.convertShardKeyToHashed(value);
        }
        async cls() {
            var _b;
            const { evaluationListener } = this._instanceState;
            await ((_b = evaluationListener.onClearCommand) === null || _b === void 0 ? void 0 : _b.call(evaluationListener));
        }
        isInteractive() {
            return this._instanceState.isInteractive;
        }
    };
    _a = instanceStateSymbol;
    __setFunctionName(_classThis, "ShellApi");
    (() => {
        var _b;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
        _use_decorators = [decorators_1.directShellCommand, (0, decorators_1.shellCommandCompleter)(useCompleter)];
        _show_decorators = [decorators_1.directShellCommand, decorators_1.returnsPromise, (0, decorators_1.shellCommandCompleter)(showCompleter)];
        __untrackedShow_decorators = [decorators_1.directShellCommand, decorators_1.returnsPromise, (0, decorators_1.shellCommandCompleter)(showCompleter)];
        _exit_decorators = [decorators_1.directShellCommand, decorators_1.returnsPromise, (0, decorators_1.platforms)(['CLI'])];
        _quit_decorators = [decorators_1.directShellCommand, decorators_1.returnsPromise, (0, decorators_1.platforms)(['CLI'])];
        _Mongo_decorators = [decorators_1.returnsPromise, (0, decorators_1.returnType)('Mongo'), (0, decorators_1.platforms)(['CLI'])];
        _connect_decorators = [decorators_1.returnsPromise, (0, decorators_1.returnType)('Database'), (0, decorators_1.platforms)(['CLI'])];
        _it_decorators = [decorators_1.directShellCommand, decorators_1.returnsPromise];
        _load_decorators = [decorators_1.returnsPromise];
        _enableTelemetry_decorators = [decorators_1.returnsPromise, (0, decorators_1.platforms)(['CLI'])];
        _disableTelemetry_decorators = [decorators_1.returnsPromise, (0, decorators_1.platforms)(['CLI'])];
        _passwordPrompt_decorators = [decorators_1.returnsPromise, (0, decorators_1.platforms)(['CLI'])];
        _sleep_decorators = [decorators_1.returnsPromise];
        _print_decorators = [decorators_1.returnsPromise];
        _printjson_decorators = [decorators_1.returnsPromise];
        _convertShardKeyToHashed_decorators = [decorators_1.returnsPromise];
        _cls_decorators = [decorators_1.directShellCommand, decorators_1.returnsPromise];
        __esDecorate(_classThis, null, _use_decorators, { kind: "method", name: "use", static: false, private: false, access: { has: obj => "use" in obj, get: obj => obj.use }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _show_decorators, { kind: "method", name: "show", static: false, private: false, access: { has: obj => "show" in obj, get: obj => obj.show }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, __untrackedShow_decorators, { kind: "method", name: "_untrackedShow", static: false, private: false, access: { has: obj => "_untrackedShow" in obj, get: obj => obj._untrackedShow }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _exit_decorators, { kind: "method", name: "exit", static: false, private: false, access: { has: obj => "exit" in obj, get: obj => obj.exit }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _quit_decorators, { kind: "method", name: "quit", static: false, private: false, access: { has: obj => "quit" in obj, get: obj => obj.quit }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _Mongo_decorators, { kind: "method", name: "Mongo", static: false, private: false, access: { has: obj => "Mongo" in obj, get: obj => obj.Mongo }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _connect_decorators, { kind: "method", name: "connect", static: false, private: false, access: { has: obj => "connect" in obj, get: obj => obj.connect }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _it_decorators, { kind: "method", name: "it", static: false, private: false, access: { has: obj => "it" in obj, get: obj => obj.it }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _load_decorators, { kind: "method", name: "load", static: false, private: false, access: { has: obj => "load" in obj, get: obj => obj.load }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _enableTelemetry_decorators, { kind: "method", name: "enableTelemetry", static: false, private: false, access: { has: obj => "enableTelemetry" in obj, get: obj => obj.enableTelemetry }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _disableTelemetry_decorators, { kind: "method", name: "disableTelemetry", static: false, private: false, access: { has: obj => "disableTelemetry" in obj, get: obj => obj.disableTelemetry }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _passwordPrompt_decorators, { kind: "method", name: "passwordPrompt", static: false, private: false, access: { has: obj => "passwordPrompt" in obj, get: obj => obj.passwordPrompt }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _sleep_decorators, { kind: "method", name: "sleep", static: false, private: false, access: { has: obj => "sleep" in obj, get: obj => obj.sleep }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _print_decorators, { kind: "method", name: "print", static: false, private: false, access: { has: obj => "print" in obj, get: obj => obj.print }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _printjson_decorators, { kind: "method", name: "printjson", static: false, private: false, access: { has: obj => "printjson" in obj, get: obj => obj.printjson }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _convertShardKeyToHashed_decorators, { kind: "method", name: "convertShardKeyToHashed", static: false, private: false, access: { has: obj => "convertShardKeyToHashed" in obj, get: obj => obj.convertShardKeyToHashed }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _cls_decorators, { kind: "method", name: "cls", static: false, private: false, access: { has: obj => "cls" in obj, get: obj => obj.cls }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        ShellApi = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return ShellApi = _classThis;
})();
exports.default = ShellApi;
//# sourceMappingURL=shell-api.js.map