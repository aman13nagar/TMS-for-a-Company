"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateOrFindCursor = void 0;
const decorators_1 = require("./decorators");
const helpers_1 = require("./helpers");
const abstract_cursor_1 = require("./abstract-cursor");
let AggregateOrFindCursor = (() => {
    let _classDecorators = [decorators_1.shellApiClassNoHelp];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = abstract_cursor_1.AbstractCursor;
    let _instanceExtraInitializers = [];
    let _projection_decorators;
    let _skip_decorators;
    let _sort_decorators;
    let _explain_decorators;
    var AggregateOrFindCursor = _classThis = class extends _classSuper {
        projection(spec) {
            this._cursor.project(spec);
            return this;
        }
        skip(value) {
            this._cursor.skip(value);
            return this;
        }
        sort(spec) {
            this._cursor.sort(spec);
            return this;
        }
        async explain(verbosity) {
            verbosity = (0, helpers_1.validateExplainableVerbosity)(verbosity);
            const fullExplain = await this._cursor.explain(verbosity);
            const explain = {
                ...fullExplain,
            };
            if (verbosity !== 'executionStats' &&
                verbosity !== 'allPlansExecution' &&
                explain.executionStats) {
                delete explain.executionStats;
            }
            if (verbosity === 'executionStats' &&
                explain.executionStats &&
                explain.executionStats.allPlansExecution) {
                delete explain.executionStats.allPlansExecution;
            }
            return (0, helpers_1.markAsExplainOutput)(explain);
        }
        constructor() {
            super(...arguments);
            __runInitializers(this, _instanceExtraInitializers);
        }
    };
    __setFunctionName(_classThis, "AggregateOrFindCursor");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _projection_decorators = [(0, decorators_1.returnType)('this')];
        _skip_decorators = [(0, decorators_1.returnType)('this')];
        _sort_decorators = [(0, decorators_1.returnType)('this')];
        _explain_decorators = [decorators_1.returnsPromise, (0, decorators_1.apiVersions)([1])];
        __esDecorate(_classThis, null, _projection_decorators, { kind: "method", name: "projection", static: false, private: false, access: { has: obj => "projection" in obj, get: obj => obj.projection }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _skip_decorators, { kind: "method", name: "skip", static: false, private: false, access: { has: obj => "skip" in obj, get: obj => obj.skip }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _sort_decorators, { kind: "method", name: "sort", static: false, private: false, access: { has: obj => "sort" in obj, get: obj => obj.sort }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _explain_decorators, { kind: "method", name: "explain", static: false, private: false, access: { has: obj => "explain" in obj, get: obj => obj.explain }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        AggregateOrFindCursor = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return AggregateOrFindCursor = _classThis;
})();
exports.AggregateOrFindCursor = AggregateOrFindCursor;
//# sourceMappingURL=aggregate-or-find-cursor.js.map