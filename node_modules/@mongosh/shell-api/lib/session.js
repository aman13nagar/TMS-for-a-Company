"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const database_1 = __importDefault(require("./database"));
const errors_1 = require("@mongosh/errors");
const helpers_1 = require("./helpers");
let Session = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault, (0, decorators_1.classPlatforms)(['CLI'])];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiWithMongoClass;
    let _instanceExtraInitializers = [];
    let _endSession_decorators;
    let _commitTransaction_decorators;
    let _abortTransaction_decorators;
    let _withTransaction_decorators;
    var Session = _classThis = class extends _classSuper {
        constructor(mongo, options, session) {
            super();
            this.id = (__runInitializers(this, _instanceExtraInitializers), void 0);
            this._session = session;
            this._options = options;
            this._mongo = mongo;
            this._databases = {};
            this.id = session.id;
        }
        [enums_1.asPrintable]() {
            return this._session.id;
        }
        getDatabase(name) {
            (0, helpers_1.assertArgsDefinedType)([name], ['string'], 'Session.getDatabase');
            if (!(0, helpers_1.isValidDatabaseName)(name)) {
                throw new errors_1.MongoshInvalidInputError(`Invalid database name: ${name}`, errors_1.CommonErrors.InvalidArgument);
            }
            if (!(name in this._databases)) {
                this._databases[name] = new database_1.default(this._mongo, name, this);
            }
            return this._databases[name];
        }
        advanceOperationTime(ts) {
            this._session.advanceOperationTime(ts);
        }
        advanceClusterTime(clusterTime) {
            this._session.advanceClusterTime(clusterTime);
        }
        async endSession() {
            return await this._session.endSession();
        }
        hasEnded() {
            return this._session.hasEnded;
        }
        getClusterTime() {
            return this._session.clusterTime;
        }
        getOperationTime() {
            return this._session.operationTime;
        }
        getOptions() {
            return this._options;
        }
        startTransaction(options = {}) {
            return this._session.startTransaction(options);
        }
        async commitTransaction() {
            await this._session.commitTransaction();
        }
        async abortTransaction() {
            await this._session.abortTransaction();
        }
        async withTransaction(fn, options = {}) {
            (0, helpers_1.assertArgsDefinedType)([fn, options], ['function', [undefined, 'object']]);
            return await this._session.withTransaction(async () => await fn(), options);
        }
    };
    __setFunctionName(_classThis, "Session");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _endSession_decorators = [decorators_1.returnsPromise];
        _commitTransaction_decorators = [decorators_1.returnsPromise];
        _abortTransaction_decorators = [decorators_1.returnsPromise];
        _withTransaction_decorators = [decorators_1.returnsPromise];
        __esDecorate(_classThis, null, _endSession_decorators, { kind: "method", name: "endSession", static: false, private: false, access: { has: obj => "endSession" in obj, get: obj => obj.endSession }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _commitTransaction_decorators, { kind: "method", name: "commitTransaction", static: false, private: false, access: { has: obj => "commitTransaction" in obj, get: obj => obj.commitTransaction }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _abortTransaction_decorators, { kind: "method", name: "abortTransaction", static: false, private: false, access: { has: obj => "abortTransaction" in obj, get: obj => obj.abortTransaction }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _withTransaction_decorators, { kind: "method", name: "withTransaction", static: false, private: false, access: { has: obj => "withTransaction" in obj, get: obj => obj.withTransaction }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        Session = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return Session = _classThis;
})();
exports.default = Session;
//# sourceMappingURL=session.js.map