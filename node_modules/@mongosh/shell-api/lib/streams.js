"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Streams = void 0;
const errors_1 = require("@mongosh/errors");
const decorators_1 = require("./decorators");
const stream_processor_1 = __importDefault(require("./stream-processor"));
const enums_1 = require("./enums");
let Streams = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = decorators_1.ShellApiWithMongoClass;
    let _instanceExtraInitializers = [];
    let _process_decorators;
    let _createStreamProcessor_decorators;
    let _listStreamProcessors_decorators;
    let _listConnections_decorators;
    var Streams = _classThis = class extends _classSuper {
        static newInstance(database) {
            return new Proxy(new Streams(database), {
                get(target, prop) {
                    const v = target[prop];
                    if (v !== undefined) {
                        return v;
                    }
                    if (typeof prop === 'string' && !prop.startsWith('_')) {
                        return target.getProcessor(prop);
                    }
                },
            });
        }
        constructor(database) {
            super();
            this._database = (__runInitializers(this, _instanceExtraInitializers), void 0);
            this._database = database;
        }
        get _mongo() {
            return this._database._mongo;
        }
        [enums_1.asPrintable]() {
            return 'Atlas Stream Processing';
        }
        getProcessor(name) {
            return new stream_processor_1.default(this, name);
        }
        async process(pipeline, options) {
            if (!Array.isArray(pipeline) || !pipeline.length) {
                throw new errors_1.MongoshInvalidInputError('Invalid pipeline', errors_1.CommonErrors.InvalidArgument, pipeline);
            }
            const result = await this._runStreamCommand({
                processStreamProcessor: pipeline,
                ...(options ? { options } : {}),
            });
            if (result.ok !== 1) {
                return result;
            }
            const { name, cursorId } = result;
            const sp = this.getProcessor(name);
            async function dropSp() {
                try {
                    await sp._drop();
                }
                catch (_a) {
                }
            }
            await this._instanceState.interrupted.withOverrideInterruptBehavior(() => sp._sampleFrom(cursorId), dropSp);
            return dropSp();
        }
        async createStreamProcessor(name, pipeline, options) {
            if (typeof name !== 'string' || name.trim() === '') {
                throw new errors_1.MongoshInvalidInputError(`Invalid processor name: ${name}`, errors_1.CommonErrors.InvalidArgument);
            }
            if (!Array.isArray(pipeline) || !pipeline.length) {
                throw new errors_1.MongoshInvalidInputError('Invalid pipeline', errors_1.CommonErrors.InvalidArgument, pipeline);
            }
            const result = await this._runStreamCommand({
                createStreamProcessor: name,
                pipeline,
                ...(options ? { options } : {}),
            });
            if (result.ok !== 1) {
                return result;
            }
            return this.getProcessor(name);
        }
        async listStreamProcessors(filter) {
            const result = await this._runStreamCommand({
                listStreamProcessors: 1,
                filter,
            });
            if (result.ok !== 1) {
                return result;
            }
            const rawProcessors = result.streamProcessors;
            const sps = rawProcessors.map((sp) => this.getProcessor(sp.name));
            return Object.defineProperties(sps, {
                [enums_1.asPrintable]: { value: () => rawProcessors },
                [enums_1.shellApiType]: { value: 'StreamsListResult' },
            });
        }
        async listConnections(filter) {
            const result = await this._runStreamCommand({
                listStreamConnections: 1,
                filter,
            });
            if (result.ok !== 1) {
                return result;
            }
            return Object.defineProperties(result.connections, {
                [enums_1.shellApiType]: { value: 'StreamsListResult' },
            });
        }
        async _runStreamCommand(cmd, options = {}) {
            return this._mongo._serviceProvider.runCommand(enums_1.ADMIN_DB, cmd, options);
        }
    };
    __setFunctionName(_classThis, "Streams");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _process_decorators = [decorators_1.returnsPromise];
        _createStreamProcessor_decorators = [decorators_1.returnsPromise];
        _listStreamProcessors_decorators = [decorators_1.returnsPromise];
        _listConnections_decorators = [decorators_1.returnsPromise];
        __esDecorate(_classThis, null, _process_decorators, { kind: "method", name: "process", static: false, private: false, access: { has: obj => "process" in obj, get: obj => obj.process }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _createStreamProcessor_decorators, { kind: "method", name: "createStreamProcessor", static: false, private: false, access: { has: obj => "createStreamProcessor" in obj, get: obj => obj.createStreamProcessor }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _listStreamProcessors_decorators, { kind: "method", name: "listStreamProcessors", static: false, private: false, access: { has: obj => "listStreamProcessors" in obj, get: obj => obj.listStreamProcessors }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _listConnections_decorators, { kind: "method", name: "listConnections", static: false, private: false, access: { has: obj => "listConnections" in obj, get: obj => obj.listConnections }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        Streams = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return Streams = _classThis;
})();
exports.Streams = Streams;
//# sourceMappingURL=streams.js.map